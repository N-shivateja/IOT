Week 3 (Ultrasonic Sensor)
const int trigpin=9;
const int echopin=10;
int led=5;
long duration;
int distance;

void setup() {
  // put your setup code here, to run once:
  pinMode(trigpin,OUTPUT);
  pinMode(echopin,INPUT);
  Serial.begin(9600);
}

void loop() {
  // put your main code here, to run repeatedly:
  digitalWrite(trigpin,LOW);
  delay(2);
  digitalWrite(trigpin,HIGH);
  digitalWrite(led,HIGH);
  delay(10);
  digitalWrite(trigpin,LOW);
  digitalWrite(led,LOW);
  duration=pulseIn(echopin, HIGH);
  distance=duration*0.034/2;
  delay(1000);
  Serial.print("Distance: ");
  Serial.println(distance);

}

Week 4
#include<SPI.h>
#include<MFRC522.h>
#define SS_PIN 10
#define RST_PIN 9
MFRC522 rfid(SS_PIN,RST_PIN);
MFRC522::MIFARE_Key key;
byte nuidPICC[4];
void setup() {
  Serial.begin(9600);
  SPI.begin();
  rfid.PCD_Init();
  for (byte i=0; i<6; i++) {
    key.keyByte[i] = 0xFF;
  }
}
void loop() {
  if (! rfid.PICC_IsNewCardPresent())
  return;
  if (! rfid.PICC_ReadCardSerial())
  return;
 for (byte i =0; i< 4; i++){
      nuidPICC[i] = rfid.uid.uidByte[i];
 }
 printHex(rfid.uid.uidByte, rfid.uid.size);
   Serial.println();
  rfid.PICC_HaltA();
  rfid.PCD_StopCrypto1();
}

void printHex(byte *buffer, byte bufferSize){
  for(byte i=0;i<bufferSize;i++){
    Serial.print(buffer[i]<0x10?" 0":" ");
    Serial.print(buffer[i], HEX);
  }
}

Week 5
#include "DHT.h"
#define DHTPIN 2     
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

void setup() {
 Serial.begin(9600);
Serial.println(F("DHTxx test!"));
dht.begin();
}
void loop() {
 delay(2000);
  float h = dht.readHumidity();
  float t = dht.readTemperature();
  float f = dht.readTemperature(true);
  if (isnan(h) || isnan(t) || isnan(f)) {
Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }
  Serial.print(F("Humidity: "));
  Serial.print(h);
  Serial.print(F("%  Temperature: "));
  Serial.print(t);
}

Week 6
#include <ESP8266WiFi.h>
#include "secrets.h"
#include "ThingSpeak.h" 

char ssid[] = SECRET_SSID;  
char pass[] = SECRET_PASS;   
int keyIndex = 0;            
WiFiClient  client;

unsigned long myChannelNumber = SECRET_CH_ID;
const char * myWriteAPIKey = SECRET_WRITE_APIKEY;

int number = 0;
int irPin=D5;

void setup() {
  Serial.begin(115200);  
  while (!Serial) {
    ;
  }
 
  WiFi.mode(WIFI_STA);
  ThingSpeak.begin(client); 
}

void loop() {

  // Connect or reconnect to WiFi
  if(WiFi.status() != WL_CONNECTED){
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(SECRET_SSID);
    while(WiFi.status() != WL_CONNECTED){
      WiFi.begin(ssid, pass);
      Serial.print(".");
      delay(5000);    
    }
    Serial.println("\nConnected.");
  }
  int x = ThingSpeak.writeField(myChannelNumber, 1, number, myWriteAPIKey);
  if(x == 200){
    Serial.println("Channel update successful.");
  }
  else{
    Serial.println("Problem updating channel. HTTP error code " + String(x));
  }
  if(number > 99){
    number = 0;
  }

int val;
val=digitalRead(irPin);
if(val==0)
{
number++;
Serial.println("Detected");
}
else
{
number=0;
Serial.println("Non Detected");

}
delay(20000); 
}


Week 7
#include <ESP8266WiFi.h>
#include "secrets.h"
#include "ThingSpeak.h" 

char ssid[] = SECRET_SSID;    
char pass[] = SECRET_PASS;
int keyIndex = 0;    
WiFiClient  client;
unsigned long myChannelNumber = SECRET_CH_ID;
const char * myWriteAPIKey = SECRET_WRITE_APIKEY;
int number1 = 0;
int number2 = random(0,100);
int number3 = random(0,100);
int number4 = random(0,100);
String myStatus = "";
void setup() {
  Serial.begin(115200);  
  while (!Serial) {
    ; 
  }
  WiFi.mode(WIFI_STA); 
  ThingSpeak.begin(client);  
}
void loop() {
  if(WiFi.status() != WL_CONNECTED){
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(SECRET_SSID);
    while(WiFi.status() != WL_CONNECTED){
      WiFi.begin(ssid, pass);  
      Serial.print(".");
      delay(5000);     
    } 
    Serial.println("\nConnected.");
  }
  ThingSpeak.setField(1, number1);
  ThingSpeak.setField(2, number2);
  ThingSpeak.setField(3, number3);
  ThingSpeak.setField(4, number4);
  if(number1 > number2){
    myStatus = String("field1 is greater than field2"); 
  }
  else if(number1 < number2){
    myStatus = String("field1 is less than field2");
  }
  else{
    myStatus = String("field1 equals field2");
  }
  ThingSpeak.setStatus(myStatus);
  int x = ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
  if(x == 200){
    Serial.println("Channel update successful.");
  }
  else{
    Serial.println("Problem updating channel. HTTP error code " + String(x));
  }
  number1++;
  if(number1 > 99){
    number1 = 0;
  }
  number2 = random(0,100);
  number3 = random(0,100);
  number4 = random(0,100);
  delay(20000); 
}


Week 8
#include "ThingSpeak.h"
#include <ESP8266WiFi.h>
const char ssid[]="OnePlus 9RT 5G";
const char pass[]="Shayari123";
int statusCode=0;
WiFiClient client;
unsigned long counterChannelNumber = 2044589;
const char * myCounterReadAPIKey="S0QSEXUX2B178S1N";
const int FieldNumber1 = 1;
const int FieldNumber2 = 2;

void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  ThingSpeak.begin(client);

}

void loop() {
  if(WiFi.status() != WL_CONNECTED)
  {
    Serial.print("Connecting to ");
    Serial.print(ssid);
    Serial.println("....");
    while(WiFi.status() != WL_CONNECTED)
    {
      WiFi.begin(ssid,pass);
      delay(5000);
    }
    Serial.println("Connected to wifi successfully.");
  }
  long temp = ThingSpeak.readLongField(counterChannelNumber, FieldNumber1, myCounterReadAPIKey);
  statusCode = ThingSpeak.getLastReadStatus();
  if (statusCode == 200)
  {
    Serial.print("Tmeperature:");
    Serial.println(temp);
  }
  else
  {
    Serial.println("Unable to read channel / No Internet Connection");
  }
  delay(100);
  long humidity = ThingSpeak.readLongField(counterChannelNumber, FieldNumber2, myCounterReadAPIKey);
  statusCode = ThingSpeak.getLastReadStatus();
  if (statusCode == 200)
  {
    Serial.print("Humidity:");
    Serial.println(humidity);
  }
  else
  {
    Serial.println("Unable to read channel / No Internet Connection");
  }
  delay(100);

  
}


Week 9
Pin connection : DHT11 sensor 
GND-GND
DATA PIN-D4
VCC-Vin

Source code: 

#include "ESP8266WiFi.h"
#include "DHT.h"
#define DHTTYPE DHT11
const char* ssid = "Redmi Note 11 Pro+ 5G";
const char* password =  "mani@123";
WiFiServer wifiServer(9000);
DHT dht(D4, DHT11); 
void setup() {
  Serial.begin(115200);
  delay(1000);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting..");
  }
  Serial.print("Connected to WiFi. IP:");
  Serial.println(WiFi.localIP());
  wifiServer.begin();
  dht.begin();
}
 
void loop() {
   WiFiClient client = wifiServer.available();
   if (client) {
     while (client.connected()) {
       while (client.available()>0) {
        int h = dht.readHumidity();
        client.print("humidity :");
        client.println(h);
        //Serial.println(sensor_value);
        delay(2000);
      }
    }
    client.stop();
    Serial.println("Client disconnected");
  }
}


Week 10
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include "DHT.h"
#define DHTTYPE DHT11

#define WIFI_SSID "V2029"
#define WIFI_PASS "123456789"
#define UDP_PORT 4210
DHT dht(D5, DHT11);
WiFiUDP UDP;
char packet[255];
char reply[] = "Packet received!";
 
void setup() {
  Serial.begin(115200);
  Serial.println();
  Serial.println(F("DHTxx test!"));
  dht.begin();

  WiFi.begin(WIFI_SSID, WIFI_PASS);
  Serial.print("Connecting to ");
  Serial.print(WIFI_SSID);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(2000);
    Serial.print(".");
  }
  Serial.println();
  Serial.print("Connected! IP address: ");
  Serial.println(WiFi.localIP());
  UDP.begin(UDP_PORT);
  Serial.print("Listening on UDP port ");
  Serial.println(UDP_PORT);
 
}

void loop() {
  int h = dht.readHumidity();
  int t = dht.readTemperature();
    delay(2000);
    UDP.beginPacket(UDP.remoteIP(), UDP.remotePort());
    UDP.write(reply);
    UDP.endPacket();
    UDP.println(t);
    UDP.println(h);
    Serial.println(F("Humidity:\n "));
  Serial.println(h);
  }
